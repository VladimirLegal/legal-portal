import React, { useEffect, useMemo, useState } from "react";
import { useNavigate } from "react-router-dom";
import { useEditor, EditorContent } from "@tiptap/react";
import { Editor } from '@tiptap/react'
import StarterKit from "@tiptap/starter-kit";

// ‚Üì‚Üì‚Üì –î–û–ë–ê–í–ò–¢–¨ –≤–æ—Ç —ç—Ç–æ:
import TextAlign from "@tiptap/extension-text-align";
import Underline from "@tiptap/extension-underline";
import BulletList from "@tiptap/extension-bullet-list";
import OrderedList from "@tiptap/extension-ordered-list";
import { Extension } from '@tiptap/core';


// —Ç–∞–±–ª–∏—Ü—ã ‚Äî –°–ù–ê–ß–ê–õ–ê –∏–º–ø–æ—Ä—Ç, –ü–û–¢–û–ú —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ
import { Table } from "@tiptap/extension-table";
import TableRow from "@tiptap/extension-table-row";
import TableCell from "@tiptap/extension-table-cell";
import TableHeader from "@tiptap/extension-table-header";
// —Ç—É–ª–±–∞—Ä (–∏–∫–æ–Ω–∫–∏)
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import {
  faBold,
  faItalic,
  faUnderline,
  faListUl,
  faListOl,
  faAlignLeft,
  faAlignCenter,
  faAlignRight,
  faAlignJustify,
  faUndo,
  faRedo,
  faPlay,
  faSave,
  faFilePdf,
  faUndoAlt,
  faFileWord,
  faArrowLeft,
} from '@fortawesome/free-solid-svg-icons';

const CustomTable = Table.extend({
  addAttributes() {
    return {
      ...this.parent?.(),
      class: {
        default: null,
        parseHTML: el => el.getAttribute('class'),
        renderHTML: attrs => attrs.class ? { class: attrs.class } : {}
      },
      style: {
        default: null,
        parseHTML: el => el.getAttribute('style'),
        renderHTML: attrs => attrs.style ? { style: attrs.style } : {}
      },
    };
  },
});

const CustomTableHeader = TableHeader.extend({
  addAttributes() {
    return {
      ...this.parent?.(),
      class: {
        default: null,
        parseHTML: el => el.getAttribute('class'),
        renderHTML: attrs => attrs.class ? { class: attrs.class } : {}
      },
      style: {
        default: null,
        parseHTML: el => el.getAttribute('style'),
        renderHTML: attrs => attrs.style ? { style: attrs.style } : {}
      },
    };
  },
});

const CustomTableCell = TableCell.extend({
  addAttributes() {
    return {
      ...this.parent?.(),
      class: {
        default: null,
        parseHTML: el => el.getAttribute('class'),
        renderHTML: attrs => attrs.class ? { class: attrs.class } : {}
      },
      style: {
        default: null,
        parseHTML: el => el.getAttribute('style'),
        renderHTML: attrs => attrs.style ? { style: attrs.style } : {}
      },
    };
  },
});

// –†–∞–∑—Ä–µ—à–∞–µ–º class / style / data-hint –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞—Ö –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
const GlobalAttrs = Extension.create({
  name: 'globalAttrsForHints',
  addGlobalAttributes() {
    return [
      {
        types: ['paragraph', 'heading'],
        attributes: {
          class: {
            default: null,
            parseHTML: el => el.getAttribute('class'),
            renderHTML: attrs => attrs.class ? { class: attrs.class } : {},
          },
          style: {
            default: null,
            parseHTML: el => el.getAttribute('style'),
            renderHTML: attrs => attrs.style ? { style: attrs.style } : {},
          },
          'data-hint': {
            default: null,
            parseHTML: el => el.getAttribute('data-hint'),
            renderHTML: attrs =>
              attrs['data-hint'] ? { 'data-hint': attrs['data-hint'] } : {},
          },
        },
      },
    ];
  },
});


const TEMPLATE_URL = "/api/docs/1/editor?fresh=1";


// Wrap naked {{ placeholders }} with non-editable chips for display
function wrapPlaceholdersWithChips(html) {
  return html.replace(/{{\s*([\w.]+)\s*}}/g, (_m, key) =>
    `<span class="ph-chip" data-ph="${key}" contenteditable="false">{{${key}}}</span>`
  );
}

// Try to load formData from storage (sessionStorage or localStorage)
async function loadFormDataFallback() {
  try {
    const s = window.sessionStorage.getItem("leaseFormData");
    if (s) return JSON.parse(s);
  } catch {}
  try {
    const l = window.localStorage.getItem("leaseFormData");
    if (l) return JSON.parse(l);
  } catch {}
  try {
    // check old key (for backward compatibility)
    const old = window.localStorage.getItem("formData");
    if (old) return JSON.parse(old);
  } catch {}
  return {};
}

export default function DocumentEditorPage() {
  const navigate = useNavigate();
  const [html, setHtml] = useState("");              // current editor HTML content
  const [formData, setFormData] = useState(null);    // form data object from wizard
  const [saving, setSaving] = useState(false);
  const [versions, setVersions] = useState([]);
  const [selectedFrom, setSelectedFrom] = useState(null);
  const [selectedTo, setSelectedTo] = useState(null);
  const [diffHtml, setDiffHtml] = useState("")
  const [autoRendered, setAutoRendered] = useState(false);

  // Load template and formData on mount
  useEffect(() => {
    (async () => {
      try {
        const tplText = await (await fetch(TEMPLATE_URL)).text();
        const tplWrapped = wrapPlaceholdersWithChips(tplText);
        // If we have saved edited HTML in localStorage, restore it; otherwise use template
        setHtml(tplWrapped);
      } catch (e) {
        console.error("Load template error:", e);
      }
      try {
        const fd = await loadFormDataFallback();
        setFormData(fd);
        if (fd && Object.keys(fd).length === 0) {
          console.warn("Form data not found. The document will have empty placeholders.");
        }
      } catch (e) {
        console.error("Load formData error:", e);
        setFormData({});
      }
      try {
        const versionsList = await (await fetch(`/api/docs/1/versions`)).json();
        setVersions(Array.isArray(versionsList) ? versionsList : []);
      } catch (e) {
        console.error("Failed to load versions list:", e);
      }
    })();
  }, []);
  
  // Initialize Tiptap editor with needed extensions and content
  const editor = useEditor({
    extensions: [
      StarterKit,
      TextAlign.configure({
        types: ['heading', 'paragraph'],   // –Ω–∞ —á—Ç–æ –¥–µ–π—Å—Ç–≤—É–µ—Ç
      }),
      CustomTable.configure({ resizable: true }),
      TableRow,
      CustomTableCell,
      CustomTableHeader,
      GlobalAttrs,
    ],

    content: html,  // initial content
    onUpdate: ({ editor }) => {
      // Update html state when editor content changes
      setHtml(editor.getHTML());
    }
  });
  // –ê–≤—Ç–æ–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
  useEffect(() => {
    if (autoRendered) return;                              // —É–∂–µ –ø—Ä–∏–º–µ–Ω—è–ª–∏ ‚Äî –≤—ã—Ö–æ–¥–∏–º
    if (!editor) return;                                   // –∂–¥—ë–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    if (!formData || Object.keys(formData).length === 0) { // –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –Ω–µ –∂–º—ë–º
      return;
    }
    (async () => {
      try {
        await restoreFromTemplate(1);                      // –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
      } catch (e) {
        console.warn('[auto-render] restoreFromTemplate failed, fallback to handleRenderServer', e);
        try {
          handleRenderServer();                            // –ø—Ä–æ–±—É–µ–º —Ä–µ–Ω–¥–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ HTML
        } catch (e2) {
          console.error('[auto-render] handleRenderServer failed', e2);
        }
      } finally {
        setAutoRendered(true);                             // –±–æ–ª—å—à–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å
      }
    })();
  }, [editor, formData, autoRendered]);

  // üîπ –î–µ–ª–µ–≥–∞—Ç –¥–ª—è –≤–∞—à–µ–π –∫–Ω–æ–ø–∫–∏/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  function setEditorContent(html) {
    if (editor) {
      editor.commands.setContent(html); // –≤—Ç–æ—Ä—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—Ç–∫–ª—é—á–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞
    }
  }
  // –í–°–¢–ê–í–ò–¢–¨ –ü–û–°–õ–ï —Ñ—É–Ω–∫—Ü–∏–∏ setEditorContent(html)
  // –í–°–¢–ê–í–ò–¢–¨ –°–†–ê–ó–£ –ü–û–°–õ–ï setEditorContent(...)
  function injectRawTablesFromFormData() {
    try {
      const root = document.querySelector('.ProseMirror');
      if (!root || !formData) {
        console.log('[inject] –Ω–µ—Ç root –∏–ª–∏ formData');
        return;
      }

      const invHtml = formData?.terms?.inventoryHtml || '';
      const aptHtml = formData?.terms?.apartmentHtml || '';

      let didInv = false, didApt = false;

      // 1) –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å –≤ —Å–ª–æ—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
      const invSlot = root.querySelector('.app-table-wrap[data-slot="inventoryHtml"]');
      const aptSlot = root.querySelector('.app-table-wrap[data-slot="apartmentHtml"]');

      if (invSlot && invHtml) {
        invSlot.innerHTML = invHtml;
        didInv = true;
      }
      if (aptSlot && aptHtml) {
        aptSlot.innerHTML = aptHtml;
        didApt = true;
      }

      // 2) –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç ‚Äî –≤—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ –ü–û–°–õ–ï <h2> —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
      if (!didInv && invHtml) {
        const h2s = Array.from(root.querySelectorAll('h2, h2 *')).map(n => n.closest('h2')).filter(Boolean);
        const h2Inv = h2s.find(h =>
          /–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\s*‚Ññ\s*1/i.test(h.textContent || '') &&
          /–û–ø–∏—Å—å\s+–∏–º—É—â–µ—Å—Ç–≤–∞/i.test(h.textContent || '')
        );
        if (h2Inv) {
          const wrap = document.createElement('div');
          wrap.className = 'app-table-wrap';
          wrap.setAttribute('data-fallback', 'inventoryHtml');
          wrap.setAttribute('contenteditable', 'false');
          wrap.innerHTML = invHtml;
          h2Inv.insertAdjacentElement('afterend', wrap);
          didInv = true;
        }
      }

      if (!didApt && aptHtml) {
        const h2s = Array.from(root.querySelectorAll('h2, h2 *')).map(n => n.closest('h2')).filter(Boolean);
        const h2Apt = h2s.find(h =>
          /–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\s*‚Ññ\s*2/i.test(h.textContent || '') &&
          /–û–ø–∏—Å–∞–Ω–∏–µ\s+–∫–≤–∞—Ä—Ç–∏—Ä—ã/i.test(h.textContent || '')
        );
        if (h2Apt) {
          const wrap = document.createElement('div');
          wrap.className = 'app-table-wrap';
          wrap.setAttribute('data-fallback', 'apartmentHtml');
          wrap.setAttribute('contenteditable', 'false');
          wrap.innerHTML = aptHtml;
          h2Apt.insertAdjacentElement('afterend', wrap);
          didApt = true;
        }
      }

      console.log('[inject] slots:', { invSlot: !!invSlot, aptSlot: !!aptSlot, didInv, didApt });
    } catch (e) {
      console.warn('injectRawTablesFromFormData failed', e);
    }
  }

  // –º–∞–ª–µ–Ω—å–∫–∞—è –æ–±—ë—Ä—Ç–∫–∞ ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—ä–µ–∫—Ü–∏—é –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ TipTap –¥–æ—Ä–µ–Ω–¥–µ—Ä–∏—Ç DOM
  function scheduleInjectTables() {
    setTimeout(() => injectRawTablesFromFormData(), 0);
  }

  // (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —É–¥–æ–±–Ω–æ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏)
  window.injectRawTablesFromFormData = injectRawTablesFromFormData;


  // (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–±—Ä–æ—Å–∏–º –≤ window –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏–∑–≤–Ω–µ:
  window.setEditorContent = setEditorContent;

  // If template loaded after editor initialized, update the editor content
  useEffect(() => {
    if (editor && html && editor.getHTML() !== html) {
      editor.commands.setContent(html);
      scheduleInjectTables();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [html, editor]);


  // Save current edits to localStorage on each change (for restore on reload)
  useEffect(() => {
    if (html) {
      window.localStorage.setItem("leaseDocumentHtml", html);
    }
  }, [html]);
  // –ù–û–í–´–ô –≠–§–§–ï–ö–¢: –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ formData –ø–æ–¥–ª–æ–∂–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤ —Å–ª–æ—Ç—ã
  useEffect(() => {
    if (editor && formData) {
      scheduleInjectTables();
    }
  }, [editor, formData]);



  // –ù–∞–≤–µ—Å–∏–º –∫–ª–∞—Å—Å—ã –Ω–∞ –¥–≤–µ —Ü–µ–ª–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
  function markTablesForStyling() {
    const root = document.querySelector('.ProseMirror');
    if (!root) return;

    const tables = Array.from(root.querySelectorAll('table'));
    tables.forEach(tbl => {
      const text = (tbl.textContent || '').replace(/\s+/g, ' ');

      // –û–ø–∏—Å—å –∏–º—É—â–µ—Å—Ç–≤–∞ (–µ—Å—Ç—å "–û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å" –∏ "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ")
      if (/–û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å/.test(text) && /–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ/.test(text)) {
        tbl.classList.add('inventory-table');
        tbl.setAttribute('contenteditable', 'false');
      }

      // –û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã (–µ—Å—Ç—å –ü–æ–ª/–°—Ç–µ–Ω—ã/–ü–æ—Ç–æ–ª–æ–∫/–î–≤–µ—Ä–∏/–û–∫–Ω–∞)
      if (/–ü–æ–ª/.test(text) && /–°—Ç–µ–Ω—ã/.test(text) && /–ü–æ—Ç–æ–ª–æ–∫/.test(text) && /–î–≤–µ—Ä–∏/.test(text) && /–û–∫–Ω–∞/.test(text)) {
        tbl.classList.add('apartment-table');
        tbl.setAttribute('contenteditable', 'false');
      }
    });
  }

  // Server-side render: substitute formData into placeholders
  async function handleRenderServer() {
    if (!editor) return;
    try {
      // 1) –±–µ—Ä—ë–º —Å–≤–µ–∂–∏–π —à–∞–±–ª–æ–Ω, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –±—ã–ª–∏ data-if/data-repeat
      const templateHtml = await fetch(TEMPLATE_URL).then(r => r.text());

      // 2) —Ä–µ–Ω–¥–µ—Ä–∏–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      const res = await fetch("/api/docs/1/render", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ html: templateHtml, data: formData })
      });
      if (!res.ok) throw new Error(await res.text());
      const { ok, html: finalHtml, error } = await res.json();
      if (!ok || !finalHtml) throw new Error(error || "Empty finalHtml");

      // 3) –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      console.log('[handleRenderServer] finalHtml len:', finalHtml.length);
      console.log(finalHtml.slice(0,600))
      console.log('has inventory-table:', /<table[^>]+class="[^"]*inventory-table/i.test(finalHtml));
      console.log('has app-table-wrap:', /class="app-table-wrap"/i.test(finalHtml));
      // –í–ö–õ–ï–ò–í–ê–ï–ú —Ç–∞–±–ª–∏—Ü—ã –≤ HTML –î–û setContent
      const inv = formData?.terms?.inventoryHtml || '';
      const apt = formData?.terms?.apartmentHtml || '';
      let htmlWithTables = finalHtml;

      // –ø–æ–¥–º–µ–Ω—è–µ–º —Å–ª–æ—Ç—ã (–∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —à–∞–±–ª–æ–Ω–µ)
      htmlWithTables = htmlWithTables.replace(
        /<div class="app-table-wrap"[^>]*data-slot="inventoryHtml"[^>]*><\/div>/i,
        `<div class="app-table-wrap" data-slot="inventoryHtml">${inv}</div>`
      );
      htmlWithTables = htmlWithTables.replace(
        /<div class="app-table-wrap"[^>]*data-slot="apartmentHtml"[^>]*><\/div>/i,
        `<div class="app-table-wrap" data-slot="apartmentHtml">${apt}</div>`
      );

      // —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –∏ –æ—Ç–¥–∞—ë–º —Ä–µ–¥–∞–∫—Ç–æ—Ä—É ‚Äî TipTap —Å–∞–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç –∫–∞–∫ —Ç–∞–±–ª–∏—Ü—É
      editor.commands.setContent(htmlWithTables);

      scheduleInjectTables();

      // –í–°–¢–ê–í–ò–¢–¨ –°–†–ê–ó–£ –ü–û–°–õ–ï
      setTimeout(() => {
        injectRawTablesFromFormData();
      }, 0);
    } catch (e) {
      console.error("Render error:", e);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (–ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ). –°–º. –∫–æ–Ω—Å–æ–ª—å.");
    }
  }
  
  // Save the current document version (draft)
  async function handleSaveVersion() {
    if (!editor) return;
    setSaving(true);
    try {
      const res = await fetch(`/api/docs/1/drafts`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ html: editor.getHTML(), changeNote: "–†–µ–¥–∞–∫—Ü–∏—è" })
      });
      if (!res.ok) throw new Error("Save failed");
      const savedVersion = await res.json();
      // Reload versions list
      const list = await (await fetch(`/api/docs/1/versions`)).json();
      setVersions(Array.isArray(list) ? list : []);
      alert(`–í–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${savedVersion.versionId}`);
    } catch (e) {
      console.error("Save version error:", e);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Ä—Å–∏—é");
    } finally {
      setSaving(false);
    }
  }

  // Build diff between two selected versions
  async function handleBuildDiff() {
    if (!selectedFrom || !selectedTo) {
      alert("–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è");
      return;
    }
    try {
      const res = await fetch(`/api/docs/1/diff?from=${selectedFrom}&to=${selectedTo}`);
      const { html: diff } = await res.json();
      setDiffHtml(diff || "");
    } catch (e) {
      console.error("Diff error:", e);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–π");
    }
  }

  // Export PDF: send current HTML and formData to server, open PDF in new tab
  async function handlePreviewPdf() {
    if (!editor) return;
    try {
      const payload = { html: editor.getHTML(), data: formData };
      const res = await fetch(`/api/docs/1/export/pdf`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      });
      if (!res.ok) throw new Error(await res.text());
      const blob = await res.blob();
      // Open PDF in a new browser tab for preview
      const blobUrl = URL.createObjectURL(blob);
      window.open(blobUrl, "_blank");
      // Note: content-disposition attachment will prompt download if opened directly
    } catch (e) {
      console.error("PDF export error:", e);
      alert("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF. –°–º. –∫–æ–Ω—Å–æ–ª—å.");
    }
  }

  // Export DOCX: send current HTML and formData to server, trigger file download
  async function handleDownloadDocx() {
    if (!editor) return;
    try {
      const payload = { html: editor.getHTML(), data: formData };
      const res = await fetch(`/api/docs/1/export/docx`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      });
      if (!res.ok) throw new Error(await res.text());
      const blob = await res.blob();
      // Trigger download of the DOCX file
      const blobUrl = URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = blobUrl;
      link.download = "lease.docx";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(blobUrl);
    } catch (e) {
      console.error("DOCX export error:", e);
      alert("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ DOCX. –°–º. –∫–æ–Ω—Å–æ–ª—å.");
    }
  }
  async function restoreFromTemplate(docId = 1) {
    // –µ—Å–ª–∏ onClick –ø–µ—Ä–µ–¥–∞–ª —Å–æ–±—ã—Ç–∏–µ ‚Äî –ø–æ–¥–º–µ–Ω—è–µ–º –Ω–∞ 1
    if (typeof docId === 'object' && docId !== null) docId = 1;

    // 1) —Å–≤–µ–∂–∏–π —à–∞–±–ª–æ–Ω
    const templateHtml = await fetch(`/api/docs/${docId}/editor?fresh=1`).then(r => r.text());

    // 2) —Ä–µ–Ω–¥–µ—Ä –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const payload = { html: templateHtml, data: formData };
    const rendered = await fetch(`/api/docs/${docId}/render`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    }).then(r => r.json());

    // 3) –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏–º–µ–Ω–Ω–æ finalHtml (—Å–µ—Ä–≤–µ—Ä —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª data-if/data-repeat)
    if (rendered && rendered.ok && rendered.html) {
      console.log('[restoreFromTemplate] finalHtml len:', rendered.html.length);
      const inv = formData?.terms?.inventoryHtml || '';
      const apt = formData?.terms?.apartmentHtml || '';
      // 1) –ø—Ä–æ–±—É–µ–º –ø–æ–¥–º–µ–Ω–∏—Ç—å —Å–ª–æ—Ç—ã —Ü–µ–ª–∏–∫–æ–º
      let htmlWithTables = rendered.html
        .replace(
          /<div class="app-table-wrap"[^>]*data-slot="inventoryHtml"[^>]*><\/div>/i,
          `<div class="app-table-wrap" data-slot="inventoryHtml">${inv}</div>`
        )
        .replace(
          /<div class="app-table-wrap"[^>]*data-slot="apartmentHtml"[^>]*><\/div>/i,
          `<div class="app-table-wrap" data-slot="apartmentHtml">${apt}</div>`
        );
      // 2) –µ—Å–ª–∏ —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç ‚Äî –≤—Å—Ç–∞–≤–∏–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ H2 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      if (!/data-slot="inventoryHtml"/i.test(rendered.html) && inv) {
        htmlWithTables = htmlWithTables.replace(
          /(>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\s*‚Ññ\s*1[^<]*<\/h2>)/i,
          `$1<div class="app-table-wrap" data-fallback="inventoryHtml">${inv}</div>`
        );
      }
      // 3) –û—Ç–¥–∞—ë–º –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä —É–∂–µ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
      setEditorContent(htmlWithTables);
      // –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –Ω–∞–≤–µ—Å–∏–º –∫–ª–∞—Å—Å—ã, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç–µ—Ä—è—é—Ç—Å—è
      setTimeout(() => {
        try {
          const root = document.querySelector('.ProseMirror');
          root?.querySelectorAll('.app-table-wrap table')?.forEach(tbl => {
            const text = (tbl.textContent || '').replace(/\s+/g, ' ');
            if (/–û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å/.test(text) && /–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ/.test(text)) {
              tbl.classList.add('inventory-table');
            }
            if (/–ü–æ–ª/.test(text) && /–°—Ç–µ–Ω—ã/.test(text) && /–ü–æ—Ç–æ–ª–æ–∫/.test(text) && /–î–≤–µ—Ä–∏/.test(text) && /–û–∫–Ω–∞/.test(text)) {
              tbl.classList.add('apartment-table');
            }
          });
        } catch {}
      }, 0);
    } else {
      console.warn('[restoreFromTemplate] render failed, fallback to raw template');
      setEditorContent(templateHtml);
    }
  }

  async function clearSaved(docId) {
    await fetch(`/api/docs/${docId}/clear`, { method: 'POST' });
    // –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å localStorage/IndexedDB, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ
    localStorage.removeItem(`doc:${docId}`);
    localStorage.removeItem('editorContent'); // –µ—Å–ª–∏ —Ç–∞–∫–æ–π –∫–ª—é—á –µ—Å—Ç—å
    // –∏ —Å—Ä–∞–∑—É –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å —á–∏—Å—Ç—ã–π —à–∞–±–ª–æ–Ω:
    await restoreFromTemplate(docId);
  }

  // UI warning if formData is missing
  const formDataMissing = formData && Object.keys(formData).length === 0;
  
  function handleBackToWizard() {
    // –ù–ò–ß–ï–ì–û –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å—é–¥–∞ ‚Äî –º–∞—Å—Ç–µ—Ä —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫—ç—à–µ–º —Ñ–æ—Ä–º—ã –∏ —Ç–∞–±–ª–∏—Ü
    try {
      if (window.history.length > 1) {
        navigate(-1);
      } else {
        navigate('/', { replace: true });
      }
    } catch {
      window.history.back();
    }
  }


  return (
    <div style={{ padding: 16 }}>
      {formDataMissing && (
        <div style={{ marginBottom: 16, color: "red" }}>
          –í–Ω–∏–º–∞–Ω–∏–µ: –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –º–∞—Å—Ç–µ—Ä—É –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.
        </div>
      )}
      <div style={{ display: "grid", gridTemplateColumns: "2fr 1fr", gap: 16 }}>
        {/* Left column: Editor */}
        <div>
          <div className="tt-sticky">
            <div className="tt-row tt-top">
              <div className="tt-left">
                <button onClick={handleBackToWizard} className="tt-back">
                  ‚Üê –ù–∞–∑–∞–¥ –∫ –º–∞—Å—Ç–µ—Ä—É
                </button>
                <h2 className="tt-title">–†–µ–¥–∞–∫—Ç–æ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞</h2>
              </div>
              <div className="tt-right doc-actions">
                <button onClick={handleRenderServer} className="doc-btn generate">
                  <FontAwesomeIcon icon={faPlay} className="fa-icon" />
                  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button onClick={handleSaveVersion} disabled={saving} className="doc-btn save">
                  <FontAwesomeIcon icon={faSave} className="fa-icon" />
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
                <button onClick={handlePreviewPdf} className="doc-btn pdf">
                  <FontAwesomeIcon icon={faFilePdf} className="fa-icon" />
                  PDF
                </button>
                <button onClick={() => restoreFromTemplate(1)} className="doc-btn restore">
                  <FontAwesomeIcon icon={faUndoAlt} className="fa-icon" />
                  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                </button>
                <button onClick={handleDownloadDocx} className="doc-btn docx">
                  <FontAwesomeIcon icon={faFileWord} className="fa-icon" />
                  DOCX
                </button>
                <div className="tt-group">
                <button
                  type="button"
                  className={`tt-btn ${editor.isActive('bold') ? 'is-active' : ''}`}
                  onClick={() => editor.chain().focus().toggleBold().run()}
                  title="–ñ–∏—Ä–Ω—ã–π"
                >
                  <FontAwesomeIcon icon={faBold} className="fa-icon" />
                </button>
                <button
                  type="button"
                  className={`tt-btn ${editor.isActive('italic') ? 'is-active' : ''}`}
                  onClick={() => editor.chain().focus().toggleItalic().run()}
                  title="–ö—É—Ä—Å–∏–≤"
                >
                  <FontAwesomeIcon icon={faItalic} className="fa-icon" />
                </button>
                <button
                  type="button"
                  className={`tt-btn ${editor.isActive('underline') ? 'is-active' : ''}`}
                  onClick={() => editor.chain().focus().toggleUnderline().run()}
                  title="–ü–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π"
                >
                  <FontAwesomeIcon icon={faUnderline} className="fa-icon" />
                </button>
              </div>
              <div className="tt-group">
                <button
                  type="button"
                  className={`tt-btn ${editor.isActive({ textAlign: 'left' }) ? 'is-active' : ''}`}
                  onClick={() => editor.chain().focus().setTextAlign('left').run()}
                  title="–í—ã—Ä–æ–≤–Ω—è—Ç—å –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é"
                >
                  <FontAwesomeIcon icon={faAlignLeft} className="fa-icon" />
                </button>
                <button
                  type="button"
                  className={`tt-btn ${editor.isActive({ textAlign: 'center' }) ? 'is-active' : ''}`}
                  onClick={() => editor.chain().focus().setTextAlign('center').run()}
                  title="–ü–æ —Ü–µ–Ω—Ç—Ä—É"
                >
                  <FontAwesomeIcon icon={faAlignCenter} className="fa-icon" />
                </button>
                <button
                  type="button"
                  className={`tt-btn ${editor.isActive({ textAlign: 'right' }) ? 'is-active' : ''}`}
                  onClick={() => editor.chain().focus().setTextAlign('right').run()}
                  title="–ü–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é"
                >
                  <FontAwesomeIcon icon={faAlignRight} className="fa-icon" />
                </button>
                <button
                  type="button"
                  className={`tt-btn ${editor.isActive({ textAlign: 'justify' }) ? 'is-active' : ''}`}
                  onClick={() => editor.chain().focus().setTextAlign('justify').run()}
                  title="–ü–æ —à–∏—Ä–∏–Ω–µ"
                >
                  <FontAwesomeIcon icon={faAlignJustify} className="fa-icon" />
                </button>
              </div>

              <div className="tt-group">
                <button
                  type="button"
                  className={`tt-btn ${editor.isActive('bulletList') ? 'is-active' : ''}`}
                  onClick={() => editor.chain().focus().toggleBulletList().run()}
                  title="–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫"
                >
                  <FontAwesomeIcon icon={faListUl} className="fa-icon" />
                </button>
                <button
                  type="button"
                  className={`tt-btn ${editor.isActive('orderedList') ? 'is-active' : ''}`}
                  onClick={() => editor.chain().focus().toggleOrderedList().run()}
                  title="–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫"
                >
                  <FontAwesomeIcon icon={faListOl} className="fa-icon" />
                </button>
              </div>
              <div className="tt-group">
                <button
                  type="button"
                  className="tt-btn"
                  onClick={() => editor.chain().focus().undo().run()}
                  title="–û—Ç–º–µ–Ω–∏—Ç—å"
                >
                  <FontAwesomeIcon icon={faUndo} className="fa-icon" />
                </button>
                <button
                  type="button"
                  className="tt-btn"
                  onClick={() => editor.chain().focus().redo().run()}
                  title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
                >
                  <FontAwesomeIcon icon={faRedo} className="fa-icon" />
                </button>
              </div>
              </div>
            </div>

            {editor && (
              <div className="tt-row tt-toolbar-row">
                <div className="tt-toolbar">
                  {/* –∫–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ */}
                </div>
              </div>
            )}
          </div>
          {editor && (
            <div className="tt-toolbar">
              
            </div>
          )}

          {/* The rich text editor content area */}
          <div style={{ border: "1px solid #ccc", minHeight: 400, padding: 8 }}>
            <style>{`
              /* –ï–¥–∏–Ω—ã–π –ª–∏–ø–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */
              .tt-sticky{
                position: sticky;
                top: 0;               /* –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–∫—Å-—Ö–µ–¥–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–≤–µ—Ä—Ö—É, –ø–æ—Å—Ç–∞–≤—å –µ–≥–æ –≤—ã—Å–æ—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä top: 56px */
                z-index: 50;
                background: #fff;
                border-bottom: 1px solid #e5e7eb;
                box-shadow: 0 2px 8px rgba(0,0,0,0.06);
                padding: 8px 10px;
                margin: 0 -10px 12px; /* —á—Ç–æ–±—ã —Ñ–æ–Ω/–±–æ—Ä–¥–µ—Ä —Ç—è–Ω—É–ª–∏—Å—å –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–∫–∏ */
              }

              /* –†—è–¥—ã –≤–Ω—É—Ç—Ä–∏ –ª–∏–ø–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
              .tt-row{
                display: flex;
                align-items: center;
                gap: 10px;
              }
              .tt-top{
                justify-content: space-between;
                flex-wrap: wrap;
              }
              .tt-left{
                display: flex;
                align-items: center;
                gap: 12px;
                min-height: 36px;
              }
              .tt-title{
                margin: 0;
                font-size: 18px;
                font-weight: 600;
              }

              /* –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ ‚Äî —Å–¥–µ–ª–∞–µ–º –µ—ë —á—É—Ç—å –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ */
              .tt-back{
                height: 32px;
                padding: 0 10px;
                border: 1px solid #e5e7eb;
                background: #fff;
                border-radius: 8px;
                cursor: pointer;
              }
              .tt-back:hover{ background: #f8fafc; }

              /* –†—è–¥ —Ç—É–ª–±–∞—Ä–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø–æ–¥ –±–ª–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏–π */
              .tt-toolbar-row{
                margin-top: 6px;
              }

              /* –°—Ç–∏–ª–∏ —Å–∞–º–æ–≥–æ —Ç—É–ª–±–∞—Ä–∞ (–µ—Å–ª–∏ –Ω–µ –≤—Å—Ç–∞–≤–ª—è–ª —Ä–∞–Ω—å—à–µ) */
              .tt-toolbar{
                display: flex;
                flex-wrap: wrap;
                gap: 6px;
                padding: 6px 0 0;
              }

              /* –ù–µ–º–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî —á—Ç–æ–±—ã –Ω–∞ —É–∑–∫–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö –¥–µ–π—Å—Ç–≤–∏—è –ø–∞–¥–∞–ª–∏ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É */
              @media (max-width: 900px){
                .tt-top{ gap: 8px; }
                .tt-right{ width: 100%; display: flex; flex-wrap: wrap; gap: 8px; }
                .tt-sticky{ padding: 8px; margin: 0 -8px 12px; }
              }

              .ProseMirror {
                min-height: 400px;
                padding: 20mm; /* –ø–æ–ª—è –∫–∞–∫ –≤ A4 */
                font-family: "Times New Roman", serif;
                font-size: 12pt;
                line-height: 1.5;
                background: #fff;
              }

              .ProseMirror p {
                text-align: justify;
                margin: 0 0 8pt 0;
              }

              .ProseMirror h1, .ProseMirror h2, .ProseMirror h3 {
                text-align: center;
                font-weight: bold;
                margin: 12pt 0 12pt 0;
              }
              /* –¢–∞–±–ª–∏—Ü—ã –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ ‚Äî —Ä–∞–º–∫–∏ –∏ —à–∏—Ä–∏–Ω–∞ */
              .ProseMirror .app-table-wrap table,
              .ProseMirror .inventory-table,
              .ProseMirror .apartment-table,
              .ProseMirror table {
                border-collapse: collapse; 
                width: 100%;
              }

              .ProseMirror .app-table-wrap th, .ProseMirror .app-table-wrap td,
              .ProseMirror .inventory-table th, .ProseMirror .inventory-table td,
              .ProseMirror .apartment-table th, .ProseMirror .apartment-table td,
              .ProseMirror table th, .ProseMirror table td {
                border: 1px solid #000; 
                padding: 3pt 4pt;
              }
              /* –ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–∞ */
              .doc-actions {
                display: flex;
                flex-wrap: wrap;
                gap: 8px;
                margin-bottom: 12px;
              }

              .doc-btn {
                display: inline-flex;
                align-items: center;
                gap: 6px;
                padding: 6px 12px;
                border: none;
                border-radius: 6px;
                font-size: 14px;
                font-weight: 500;
                cursor: pointer;
                color: #fff;
                transition: background 0.2s ease;
              }

              .doc-btn .fa-icon {
                font-size: 14px;
              }

              /* –¶–≤–µ—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã */
              .doc-btn.generate { background: #007bff; }       /* —Å–∏–Ω–∏–π */
              .doc-btn.generate:hover { background: #0069d9; }

              .doc-btn.save { background: #28a745; }          /* –∑–µ–ª—ë–Ω—ã–π */
              .doc-btn.save:hover { background: #218838; }

              .doc-btn.pdf { background: #17a2b8; }           /* –±–∏—Ä—é–∑–æ–≤—ã–π */
              .doc-btn.pdf:hover { background: #138496; }

              .doc-btn.restore { background: #fd7e14; }       /* –æ—Ä–∞–Ω–∂–µ–≤—ã–π */
              .doc-btn.restore:hover { background: #e96b0c; }

              .doc-btn.docx { background: #6f42c1; }          /* —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π */
              .doc-btn.docx:hover { background: #5a32a3; }

              /* ‚Äî —Ç—É–ª–±–∞—Ä ‚Äî */
              .tt-toolbar { display: flex; flex-wrap: wrap; gap: 6px; margin-bottom: 8px; }
              .tt-group   { display: inline-flex; gap: 6px; align-items: center; padding-right: 6px; border-right: 1px solid #ddd; }
              .tt-group:last-child { border-right: 0; }

              .tt-btn {
                display: inline-flex; align-items: center; justify-content: center;
                min-width: 34px; height: 32px; padding: 0 8px; border: 1px solid #ccc; border-radius: 6px;
                background: #f7f7f7; cursor: pointer; font-size: 14px;
              }
              .tt-btn:hover { background: #eee; }
              .tt-btn.is-active { background: #dce6ff; border-color: #7aa2ff; }
              .tt-btn .fa-icon { width: 16px; height: 16px; }
              /* –º–∞—Ä–∫–µ—Ä —Ä–∞–∑—Ä—ã–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã; –º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å –∏–ª–∏ —Ç–æ–Ω–∫–æ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ */
              .ProseMirror .pagebreak {
                height: 0; 
                margin: 0; 
                padding: 0;
                /* –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø—É–Ω–∫—Ç–∏—Ä–Ω—É—é –ª–∏–Ω–∏—é:
                border-top: 1px dashed #bbb;
                margin: 12px 0;
                */
              }
                
            `}</style>
            {/* Hints styling (editor only) */}
            <style>{`
              /* —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å: –∫—Ä–∞—Å–∏–º —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ */
              .ProseMirror [data-hint], .ProseMirror .editor-hint {
                display: inline-block;
                margin: 6px 0 0 0;
                padding: 4px 8px;
                background: #fff8c5 !important;
                border: 1px solid #f0c36d;
                border-radius: 6px;
                font-size: 0.9em;
                color: #333;
              }
            `}</style>

            <EditorContent editor={editor} />
          </div>
        </div>
        {/* Right column: Versions and diff viewer */}
        <div>
          <h3>–í–µ—Ä—Å–∏–∏</h3>
          <div style={{ marginBottom: 8 }}>
            <select value={selectedFrom || ""} onChange={e => setSelectedFrom(e.target.value)}>
              <option value="">from‚Ä¶</option>
              {versions.map(v => (
                <option key={v.versionId} value={v.versionId}>
                  {v.versionId} ‚Äî {v.createdAt}
                </option>
              ))}
            </select>
            <select value={selectedTo || ""} onChange={e => setSelectedTo(e.target.value)} style={{ marginLeft: 8 }}>
              <option value="">to‚Ä¶</option>
              {versions.map(v => (
                <option key={v.versionId} value={v.versionId}>
                  {v.versionId} ‚Äî {v.createdAt}
                </option>
              ))}
            </select>
            <button onClick={handleBuildDiff} style={{ marginLeft: 8 }}>
              –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            </button>
          </div>
          {/* Diff output (rendered as HTML) */}
          <div 
            style={{ border: "1px solid #ddd", padding: 8, maxHeight: 400, overflow: "auto" }}
            dangerouslySetInnerHTML={{ __html: diffHtml }}
          />
        </div>
      </div>
    </div>
  );
}
